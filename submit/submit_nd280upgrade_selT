#!/usr/bin/perl

#-------------------------------------------------------------------------------------------------------------------------------
# Submit a batch of SelND280UpEvent_Transverse.C jobs
#
# Inputs
#  --resource               : Computer resource, <ETH-Monch, RAL, Oxford, Grid, interactive>. Default: interactive.
#  --tag                    : Tag for output files.
#  --fit-param-list         : Fit parameter list. See FitParamList.h for allowed options.
#  --physparam-freepar      : Free parameter
#  --npt-freepar            : Number of points of the free parameter to scan
#  --step-freepar           : Step of the free parameter scan
#
# M.Lamoureux (modified from the initial file of D.Sgalaberna)
#-------------------------------------------------------------------------------------------------------------------------------
#

use File::Path;

$iarg=0;
foreach (@ARGV) {

    if($iarg % 2 == 1) {$iarg++; next;}
    
    ##################################### Common ########################################
    if   ($_ eq '--resource'         ) { $resource        = $ARGV[$iarg+1]; }
    elsif($_ eq '--tag'              ) { $tag             = $ARGV[$iarg+1]; }
    elsif($_ eq '--nruns'            ) { $nruns           = $ARGV[$iarg+1]; }
    elsif($_ eq '--inputfile'        ) { $inputfile       = $ARGV[$iarg+1]; }
    elsif($_ eq '--first_expt'       ) { $first_expt      = $ARGV[$iarg+1]; }
    elsif($_ eq '--nexpts'           ) { $nexpts          = $ARGV[$iarg+1]; }

    # where to put the output files
    elsif($_ eq '--job-dir'          ) { $job_dir         = $ARGV[$iarg+1]; }
    # where is the software (/t2k-nd280-upgrade)
    elsif($_ eq '--softw-dir'        ) { $softw_dir       = $ARGV[$iarg+1]; }    
    
    elsif($_ eq '--docut-reac'       ) { $docut_reac      = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-cc'         ) { $docut_cc        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-reac'         ) { $cut_reac        = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-mater'      ) { $docut_mater     = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-vertex'     ) { $docut_vertex    = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-target1'    ) { $docut_target1   = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-target2'    ) { $docut_target2   = $ARGV[$iarg+1]; }
    
    elsif($_ eq '--cut-fv1-minX'      ) { $cut_fv1_minX     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-maxX'      ) { $cut_fv1_maxX     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-minY'      ) { $cut_fv1_minY     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-maxY'      ) { $cut_fv1_maxY     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-minZ'      ) { $cut_fv1_minZ     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-maxZ'      ) { $cut_fv1_maxZ     = $ARGV[$iarg+1]; }

    elsif($_ eq '--cut-fv2-minX'      ) { $cut_fv2_minX     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-maxX'      ) { $cut_fv2_maxX     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-minY'      ) { $cut_fv2_minY     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-maxY'      ) { $cut_fv2_maxY     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-minZ'      ) { $cut_fv2_minZ     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-maxZ'      ) { $cut_fv2_maxZ     = $ARGV[$iarg+1]; }
    
    elsif($_ eq '--docut-vtxX'       ) { $docut_vtxX      = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-xmin'         ) { $cut_xmin        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-xmax'         ) { $cut_xmax        = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-vtxZ'       ) { $docut_vtxZ      = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-zmin'         ) { $cut_zmin        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-zmax'         ) { $cut_zmax        = $ARGV[$iarg+1]; }
    
    elsif($_ eq '--docut-dl-target'  ) { $docut_dl_target  = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-dl-target'    ) { $cut_dl_target    = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-dlyz-tpc'   ) { $docut_dlyz_tpc   = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-dlyz-tpc'     ) { $cut_dlyz_tpc     = $ARGV[$iarg+1]; }
    
    else {
	print "Unrecognised argument ".$_."\n"; exit;
    }
    $iarg++;
}

$resource        = "interactive"                 unless defined $resource;
$tag             = "SelND280Up_test"             unless defined $tag;

$inputfile       = "/sps/t2k/mlamoure/dev/Upgrade/t2k-nd280-upgrade/files/g4ND280Up_6E20_classic_AfterDetUpdate_19_1_17_USECalP0D.root" unless defined $inputfile;

$first_expt      = 0                             unless defined $first_expt;

# Numu Beam
$nruns           = 17                            unless defined $nruns; 
$nexpts          = 20000                         unless defined $nexpts;
# NumuBar beam
#$nruns           = 3                             unless defined $nruns; 
#$nexpts          = 20000                         unless defined $nexpts;

#
# Selection cuts
#

#
# Horizontal Targets (ND280 upgrade)
#
# Fiducial Volume Target 1
$cut_fv1_minX    = -932                       unless defined $cut_fv1_minX;
$cut_fv1_maxX    = +932                       unless defined $cut_fv1_maxX;
$cut_fv1_minY    = -316                       unless defined $cut_fv1_minY;
$cut_fv1_maxY    = +284                       unless defined $cut_fv1_maxY;
$cut_fv1_minZ    = -1787                      unless defined $cut_fv1_minZ;
$cut_fv1_maxZ    = -487                       unless defined $cut_fv1_maxZ;

# Fiducial Volume Target 2
$cut_fv2_minX    = -932                       unless defined $cut_fv2_minX;
$cut_fv2_maxX    = +932                       unless defined $cut_fv2_maxX;
$cut_fv2_minY    = -316                       unless defined $cut_fv2_minY;
$cut_fv2_maxY    = +284                       unless defined $cut_fv2_maxY;
$cut_fv2_minZ    = +487                       unless defined $cut_fv2_minZ;
$cut_fv2_maxZ    = +1787                      unless defined $cut_fv2_maxZ;


#
# Vertical Targets (Current ND280)
#
# # Fiducial FGD 1
# $cut_fv1_minX    = -932.15                      unless defined $cut_fv1_minX;
# $cut_fv1_maxX    = +932.15                      unless defined $cut_fv1_maxX;
# #
# $cut_fv1_minY    = -932.15                       unless defined $cut_fv1_minY;
# $cut_fv1_maxY    = +932.15                       unless defined $cut_fv1_maxY;
# #
# $cut_fv1_minZ    = -790                      unless defined $cut_fv1_minZ;
# $cut_fv1_maxZ    = -487                       unless defined $cut_fv1_maxZ;
# # Fiducial FGD 2
# $cut_fv2_minX    = -932.15                      unless defined $cut_fv2_minX;
# $cut_fv2_maxX    = +932.15                      unless defined $cut_fv2_maxX;
# #
# $cut_fv2_minY    = -932.15                       unless defined $cut_fv2_minY;
# $cut_fv2_maxY    = +932.15                       unless defined $cut_fv2_maxY;
# #
# $cut_fv2_minZ    = +487                       unless defined $cut_fv2_minZ;
# $cut_fv2_maxZ    = +790                      unless defined $cut_fv2_maxZ;



# Reject all NC and don't account for them in the efficiencies
$docut_cc        = 1                             unless defined $docut_cc;

# 0=CCQE, 1=MEC, 2=CC1pi, 3=CCcoh, 4=CCDIS, 5=NC (see macro definition)
$docut_reac      = 0                             unless defined $docut_reac;
$cut_reac        = 0                             unless defined $cut_reac; 

# select interactions only in Fiducial Volume
$docut_vertex    = 1                             unless defined $docut_vertex;
$docut_target1   = 1                             unless defined $docut_target1;
$docut_target2   = 0                             unless defined $docut_target2;

# select range of X vertex position
$docut_vtxX      = 0                             unless defined $docut_vtxX;
$cut_xmin        = -575                         unless defined $docut_xmin;
$cut_xmax        = +575                         unless defined $docut_xmax;

# select range of Z vertex position
$docut_vtxZ      = 0                             unless defined $docut_vtxZ;
# 30cm downstream
#$cut_zmin        = -2487                         unless defined $docut_zmin;
#$cut_zmax        = -2487 + 300                   unless defined $docut_zmax;
# 30cm upstream
#$cut_zmin        = -487 - 300                    unless defined $docut_zmin;
#$cut_zmax        = -487                          unless defined $docut_zmax;
# 140cm middle
$cut_zmin        = -2487 + 300                   unless defined $docut_zmin;
$cut_zmax        = -487 - 300                    unless defined $docut_zmax;

# select track length (mm) in targets
$docut_dl_target    = 1                          unless defined $docut_dl_target;
$cut_dl_target      = 100                         unless defined $cut_dl_target; 

# select track DeltaLyz (mm) in TPCs
$docut_dlyz_tpc    = 1                           unless defined $docut_dlyz_tpc;
$cut_dlyz_tpc      = 200                         unless defined $cut_dlyz_tpc; 

##################################

$irun = 0;
while($irun < $nruns) { # loop over the jobs
    
    $evt_first = $first_expt + $irun * $nexpts;
    
    
    $newtag = "$tag";
    if($docut_vertex eq 1){
	if($docut_target1 eq 1){ $newtag = "$newtag-Targ1";}
	if($docut_target2 eq 1){ $newtag = "$newtag-Targ2";}
    }
    if($docut_cc    eq 1){ $newtag = "$newtag-CC";}
    if($docut_reac  eq 1){ $newtag = "$newtag-Reac$cut_reac";}
    if($docut_vtxZ  eq 1){ $newtag = "$newtag-Zrange[$cut_zmin,$cut_zmax]";}
    if($docut_vtxX  eq 1){ $newtag = "$newtag-Xrange[$cut_xmin,$cut_xmax]";}
    
    $arguments = "root -l -q -b $softw_dir/src/app/nd280UpEvent/TND280UpTrackPoint.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpTrack.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpVertex.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpEvent.cc+ '$softw_dir/macro/SelND280UpEvent_Transverse.C+($evt_first,$nexpts,\"$job_dir/$newtag\",\"$inputfile\",$cut_fv1_minX,$cut_fv1_maxX,$cut_fv1_minY,$cut_fv1_maxY,$cut_fv1_minZ,$cut_fv1_maxZ,$cut_fv2_minX,$cut_fv2_maxX,$cut_fv2_minY,$cut_fv2_maxY,$cut_fv2_minZ,$cut_fv2_maxZ,$docut_cc,$docut_reac,$cut_reac,$docut_vertex,$docut_target1,$docut_target2,$docut_vtxX,$cut_xmin,$cut_xmax,$docut_vtxZ,$cut_zmin,$cut_zmax,$docut_dl_target,$cut_dl_target,$docut_dlyz_tpc,$cut_dlyz_tpc)'";
    
    $command = "$arguments";
    
    print "\n";
    print "Job $irun \n";
    print "First event: $evt_first \n";
    print "# of events: $nexpts \n";
    print "$command \n";
    print "\n////////////////////////////// \n\n";

    ################################### Submit the job ##################################
    
    #
    # CC, $job_dir not used, $tag gives path/name of output file
    #
    if($resource eq "CC") {
	open(PBS, ">$job_dir/selection-$newtag-$evt_first-$nexpts.sbatch") or die("Can not create the sbatch script");
	print PBS "#!/bin/bash -l  \n";
	print PBS "source $softw_dir/T2KND280Up_CLHEP.csh $softw_dir \n";
	print PBS "$command \n";
	close(PBS);	
	`qsub -q veryshort -l vmem=6000mb -l mem=6000mb $job_dir/selection-$newtag-$evt_first-$nexpts.sbatch`;
    }
    if($resource eq "interactive") {
	system($command);
    }
    
    $irun=$irun+1; # increment job id
    
} # loop over jobs

