#!/usr/bin/perl


#-------------------------------------------------------------------------------------------------------------------------------
# Submit a batch of build_marg_toys.C jobs
#
# Inputs
#  --resource               : Computer resource, <ETH-Monch, RAL, Oxford, Grid, interactive>. Default: interactive.
#  --tag                    : Tag for output files.
#  --config-file            : Analysis configuration file from the config/ directory.
#  --fit-param-list         : Fit parameter list. See FitParamList.h for allowed options.
#  --physparam-freepar      : Free parameter
#  --npt-freepar            : Number of points of the free parameter to scan
#  --step-freepar           : Step of the free parameter scan

#  --tweak-systematics      : generate marginalization toy MC with randomized systematics
#  --cpu-time               : Required CPU time. Default: "6:00:00" for RAL, "11:50:00" for Oxford.
#  --job-dir                : Directory for job scripts and outputs. Default: `pwd`.
#  --softw-dir              : Oscillation code top-level directory. Default: `pwd`.
#  --dmsq-scheme            : abs23 or fogli
#  --hierarchy              : normal or inverted
#  --mix-param-choice       : sinsq2theta or sinsqtheta
#  --mix-param-octant       : one or two
#
# D.Sgalaberna
#-------------------------------------------------------------------------------------------------------------------------------
#


use File::Path;

$iarg=0;
foreach (@ARGV) {

    if($iarg % 2 == 1) {$iarg++; next;}
    
    ##################################### Common ########################################
    if   ($_ eq '--resource'         ) { $resource        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cpu-time'         ) { $cput            = $ARGV[$iarg+1]; }
    elsif($_ eq '--tag'              ) { $tag             = $ARGV[$iarg+1]; }
    elsif($_ eq '--nruns'            ) { $nruns           = $ARGV[$iarg+1]; }
    elsif($_ eq '--config'           ) { $config_file     = $ARGV[$iarg+1]; }
    elsif($_ eq '--vis-file'         ) { $vis_file        = $ARGV[$iarg+1]; }
    elsif($_ eq '--first-exp'        ) { $first_exp       = $ARGV[$iarg+1]; }
    elsif($_ eq '--nexpts'           ) { $nexpts          = $ARGV[$iarg+1]; }
    elsif($_ eq '--job-dir'          ) { $job_dir         = $ARGV[$iarg+1]; }
    elsif($_ eq '--softw-dir'        ) { $softw_dir       = $ARGV[$iarg+1]; }
    else {
	print "Unrecognised argument ".$_."\n"; exit;
    }
    $iarg++;
}

$resource        = "interactive"               unless defined $resource;
#$tag             = "g4ND280Up_6E20_30cm_width1807mm_numubar_Cluster"    unless defined $tag;
$tag             = "g4ND280Up_6E20_nd280current_numu_Cluster"    unless defined $tag;

#$config_file     = "config/configuration.xml" unless defined $config_file;
#$config_file     = "config/configuration_30cm.xml" unless defined $config_file;
#$config_file     = "config/configuration_width1807mm.xml" unless defined $config_file;
#$config_file     = "config/configuration_30cm_width1807mm.xml" unless defined $config_file;
$config_file     = "config/configuration_nd280current.xml" unless defined $config_file;

#$config_file     = "config/configuration_cluster.xml" unless defined $config_file;
#$config_file     = "config/configuration_cluster_30cm.xml" unless defined $config_file;
#$config_file     = "config/configuration_cluster_width1807mm.xml" unless defined $config_file;
#$config_file     = "config/configuration_cluster_30cm_width1807mm.xml" unless defined $config_file;
#$config_file     = "config/configuration_cluster_nd280current.xml" unless defined $config_file;


$vis_file        = "mac/vis.mac"           unless defined $vis_file;
#$vis_file        = "mac/vis_nd280current.mac"           unless defined $vis_file;
#$vis_file        = "mac/vis_cluster.mac"           unless defined $vis_file;
#$vis_file        = "mac/vis_cluster_nd280current.mac"           unless defined $vis_file;

#$nruns           = 68                          unless defined $nruns;      # number of jobs (6E20POT - thick=30cm, width=230cm - default)
#$nruns           = 44                          unless defined $nruns;      # number of jobs (6E20POT - thick=30cm, width=180cm)
$nruns           = 41                          unless defined $nruns;      # number of jobs (6E20POT - nd280 current)
$nexpts          = 5000                        unless defined $nexpts;     # number of events per job
$first_expt      = 0                           unless defined $first_expt; # first event

$queue           = "veryshort"                unless defined $queue;

$irun = 0;
while($irun < $nruns) { # loop over the jobs
    
    $evt_first = $first_expt + $irun * $nexpts;
    
 
    $arguments = "$softw_dir/bin/EffStudy.exe $softw_dir/src/app/EffStudy/$vis_file $softw_dir/src/app/EffStudy/$config_file $job_dir/$tag-Exp$evt_first-Nexpt$nexpts $evt_first $nexpts";
   
    $command = "$arguments";
    
    print "\n";
    print "Job $irun \n";
    print "First event: $evt_first \n";
    print "# of events: $nexpts \n";
    print "$command \n";
    print "\n////////////////////////////// \n\n";

    ################################### Submit the job ##################################
    
    #
    # UNIGE (Atlas cluster), $job_dir not used, $tag gives path/name of output file
    #
    if($resource eq "UNIGE-Atlas") {
	open(PBS, ">$job_dir/g4ND280Up-$evt_first-$nexpts.sbatch") or die("Can not create the sbatch script");
	print PBS "#!/bin/bash -l  \n";
	print PBS "source $softw_dir/T2KND280Up_CLHEP.sh $softw_dir \n";
	print PBS "\n";
	print PBS "env \n";
	print PBS "\n";
	print PBS "uname -n \n";
	print PBS "\n";
	print PBS "$command \n";
	close(PBS);	
	`qsub -q $queue -l mem=6000mb -l vmem=6000mb $job_dir/g4ND280Up-$evt_first-$nexpts.sbatch`;
	#`qsub -q $queue -l mem=6000mb -l vmem=6000mb -l nodes=atlas079+atlas075+atlas063+atlas063+atlas054+atlas040 $job_dir/g4ND280Up-$evt_first-$nexpts.sbatch`;
    }
    if($resource eq "interactive") {
	system($command);
    }

    $irun=$irun+1;
} # end loop over jobs
