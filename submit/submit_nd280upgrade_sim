#!/usr/bin/perl


#-------------------------------------------------------------------------------------------------------------------------------
# Submit a batch of build_marg_toys.C jobs
#
# Inputs
#  --resource               : Computer resource, <ETH-Monch, RAL, Oxford, Grid, interactive>. Default: interactive.
#  --tag                    : Tag for output files.
#  --config-file            : Analysis configuration file from the config/ directory.
#  --fit-param-list         : Fit parameter list. See FitParamList.h for allowed options.
#  --physparam-freepar      : Free parameter
#  --npt-freepar            : Number of points of the free parameter to scan
#  --step-freepar           : Step of the free parameter scan

#  --tweak-systematics      : generate marginalization toy MC with randomized systematics
#  --cpu-time               : Required CPU time. Default: "6:00:00" for RAL, "11:50:00" for Oxford.
#  --job-dir                : Directory for job scripts and outputs. Default: `pwd`.
#  --softw-dir              : Oscillation code top-level directory. Default: `pwd`.
#  --dmsq-scheme            : abs23 or fogli
#  --hierarchy              : normal or inverted
#  --mix-param-choice       : sinsq2theta or sinsqtheta
#  --mix-param-octant       : one or two
#
# D.Sgalaberna
#-------------------------------------------------------------------------------------------------------------------------------
#

use File::Path;

$iarg=0;
foreach (@ARGV) {

    if($iarg % 2 == 1) {$iarg++; next;}

    ##################################### Common ########################################
    if   ($_ eq '--resource'         ) { $resource        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cpu-time'         ) { $cput            = $ARGV[$iarg+1]; }
    elsif($_ eq '--tag'              ) { $tag             = $ARGV[$iarg+1]; }
    elsif($_ eq '--nruns'            ) { $nruns           = $ARGV[$iarg+1]; }

    elsif($_ eq '--job-dir'          ) { $job_dir         = $ARGV[$iarg+1]; }
    elsif($_ eq '--softw-dir'        ) { $softw_dir       = $ARGV[$iarg+1]; }
    elsif($_ eq '--fmwk-dir'         ) { $fmwk_dir        = $ARGV[$iarg+1]; }
        
    else {
	print "Unrecognised argument ".$_."\n"; exit;
    }
    $iarg++;
}

$resource        = "interactive"               unless defined $resource;
$tag             = "fitmarg_fc_dcp"  unless defined $tag;
$nruns           = 1                           unless defined $nruns; 
$config_file = ""  unless defined $config_file;
$arguments = "$softw_dir/";


#for (( itoy=NITER_START; itoy<NITER; itoy++ ))
#do
#    let IDtoy=$STEPtoy*$itoy
#    let itoylast=$STEPtoy+$IDtoy

$irun = 0;
while($irun < $nruns) { # loop over the jobs


    $ifile_first = $first_expt + $irun * $nexpts;
    $ifile_last  = $ifile_first + $nexpts - 1; # The "last" experiment is included
    
    
    $command = "$program $arguments";


    print "$command \n";
    
    print "\n////////////////////////////// \n\n";
}
    
################################### Submit the job ##################################

#
# ETH (Monch cluster), $job_dir not used, $tag gives path/name of output file
#
if($resource eq "ETH-Monch") {
    open(PBS, ">/mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch") or die("Can not create the sbatch script");
    print PBS "#!/bin/bash -l  \n";
    #print PBS "#SBATCH --partition=dphys_compute_wk  \n";
    #print PBS "#SBATCH --partition=dphys_compute  \n";
    print PBS "#SBATCH --partition=dphys_compute --mem-per-cpu=2000  \n"; # in MB. Same as dphys_largemem default RAM    
    #print PBS "#SBATCH --partition=dphys_largemem  \n";
    #print PBS "#SBATCH --partition=dphys_largemem --mem-per-cpu=4000  \n";
    print PBS "#SBATCH --nodes=1  \n";
    print PBS "#SBATCH --ntasks-per-node=1  \n";
    print PBS "#SBATCH --output=/mnt/lnec/davides/VALOR/outputs/out-$tag_in.%j.o  \n";
    print PBS "#SBATCH --error=/mnt/lnec/davides/VALOR/outputs/out-$tag_in.%j.e  \n";
    print PBS "echo \$SLURM_JOB_NODELIST \n"; # print the node  number
    print PBS "$command \n";
    close(PBS);
    #`sbatch -t 23:59:00 /mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch`;
    #`sbatch -t 1-00:00:00 /mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch`;
    #`sbatch -t 10:00:00 /mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch`;
    `sbatch -t 07:00:00 /mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch`;
    #`sbatch -t 05:00:00 /mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch`;
    #`sbatch -t 00:59:00 /mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch`;
    #`sbatch -t 00:15:00 /mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch`;
    #`sbatch -t 00:02:00 /mnt/lnec/davides/VALOR/sbatch_files/run_fc-$irun.sbatch`;
}


