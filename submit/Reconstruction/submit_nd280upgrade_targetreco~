#!/usr/bin/perl

#-------------------------------------------------------------------------------------------------------------------------------
#
# Inputs
#  --resource               : Computer resource, <ETH-Monch, RAL, Oxford, Grid, interactive>. Default: interactive.
#  --tag                    : Tag for output files.
#  --fit-param-list         : Fit parameter list. See FitParamList.h for allowed options.
#  --physparam-freepar      : Free parameter
#  --npt-freepar            : Number of points of the free parameter to scan
#  --step-freepar           : Step of the free parameter scan
#
# D.Sgalaberna
#-------------------------------------------------------------------------------------------------------------------------------
#

use File::Path;

$iarg=0;
foreach (@ARGV) {

    if($iarg % 2 == 1) {$iarg++; next;}
    
    ##################################### Common ########################################
    if   ($_ eq '--resource'         ) { $resource        = $ARGV[$iarg+1]; }
    elsif($_ eq '--tag'              ) { $tag             = $ARGV[$iarg+1]; }
    elsif($_ eq '--nruns'            ) { $nruns           = $ARGV[$iarg+1]; }
    elsif($_ eq '--inputfile'        ) { $inputfile       = $ARGV[$iarg+1]; }
    elsif($_ eq '--first_expt'       ) { $first_expt      = $ARGV[$iarg+1]; }
    elsif($_ eq '--nexpts'           ) { $nexpts          = $ARGV[$iarg+1]; }
    elsif($_ eq '--debug'            ) { $debug           = $ARGV[$iarg+1]; }
    
    # where to put the output files
    elsif($_ eq '--job-dir'          ) { $job_dir         = $ARGV[$iarg+1]; }
    # where is the software (/t2k-nd280-upgrade)
    elsif($_ eq '--softw-dir'        ) { $softw_dir       = $ARGV[$iarg+1]; }    
    else {
	print "Unrecognised argument ".$_."\n"; exit;
    }
    $iarg++;
}

$resource        = "interactive"                 unless defined $resource;
$tag            = "prova" unless defined $tag;
$inputfile        = "/neutrino/data7/davide/out_cluster/PROVA/production/TEST_TARGET/g4ND280Up_Test-All_E21_AltTargTPC_SuperFGD.root" unless defined $inputfile;

$first_expt      = 0                             unless defined $first_expt;
$nruns           = 1                             unless defined $nruns; # TPC+Target+ECal (Store all TrackPoints)
$nexpts          = 10                          unless defined $nexpts;

$debug           = 0   unless defined $debug; # flag for debugging output: 0 --> NO printout, 1 --> printout
  
##################################

$irun = 0;
while($irun < $nruns) { # loop over the jobs
    
    $evt_first = $first_expt + $irun * $nexpts;
    
    $newtag = "$tag";
    $arguments = "$softw_dir/bin/Reconstruction.exe $inputfile $evt_first $nexpts $tag $debug";
    $command = "$arguments";
    
    print "\n";
    print "Job $irun \n";
    print "First event: $evt_first \n";
    print "# of events: $nexpts \n";
    print "$command \n";
    print "\n////////////////////////////// \n\n";

    ################################### Submit the job ##################################
    
    #
    # UNIGE (Atlas cluster), $job_dir not used, $tag gives path/name of output file
    #
    if($resource eq "UNIGE-Atlas") {
	open(PBS, ">$job_dir/$newtag-$evt_first-$nexpts.sbatch") or die("Can not create the sbatch script");
	print PBS "#!/bin/bash -l  \n";
	print PBS "source $softw_dir/T2KND280Up_CLHEP.sh $softw_dir \n";
	print PBS "$command \n";
	close(PBS);	
	`qsub -q veryshort -l vmem=6000mb -l mem=6000mb $job_dir/$newtag-$evt_first-$nexpts.sbatch`;
    }
    if($resource eq "interactive") {
	system($command);
    }
    
    $irun=$irun+1; # increment job id
    
} # loop over jobs

