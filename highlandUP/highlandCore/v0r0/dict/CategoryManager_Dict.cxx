//
// File generated by /home/evrazhka/ND280/nd280rep/v11r31/ROOT/v5r34p09n04/amd64_linux26/bin/rootcint at Tue Aug 23 15:23:57 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIdictdICategoryManager_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CategoryManager_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CategoryManager CategoryManager;
      #else
      class CategoryManager  :  public ::HLClonesArray {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~CategoryManager() throw() {};
         map< ::string, ::TrackCategoryDefinition* > _track_category_map; //
         bool _ready; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void CategoryManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CategoryManager_Dictionary();
   static void *new_CategoryManager(void *p = 0);
   static void *newArray_CategoryManager(Long_t size, void *p);
   static void delete_CategoryManager(void *p);
   static void deleteArray_CategoryManager(void *p);
   static void destruct_CategoryManager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CategoryManager*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CategoryManager) == sizeof(::ROOT::Shadow::CategoryManager));
      ::CategoryManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CategoryManager),0);
      static ::ROOT::TGenericClassInfo 
         instance("CategoryManager", "./../src/CategoryManager.hxx", 54,
                  typeid(::CategoryManager), DefineBehavior(ptr, ptr),
                  &CategoryManager_ShowMembers, &CategoryManager_Dictionary, isa_proxy, 4,
                  sizeof(::CategoryManager) );
      instance.SetNew(&new_CategoryManager);
      instance.SetNewArray(&newArray_CategoryManager);
      instance.SetDelete(&delete_CategoryManager);
      instance.SetDeleteArray(&deleteArray_CategoryManager);
      instance.SetDestructor(&destruct_CategoryManager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CategoryManager*)
   {
      return GenerateInitInstanceLocal((::CategoryManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CategoryManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CategoryManager_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CategoryManager*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void CategoryManager_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CategoryManager.
      typedef ::ROOT::Shadow::CategoryManager ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CategoryManager*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_track_category_map", (void*)&sobj->_track_category_map);
      R__insp.InspectMember("map<std::string,TrackCategoryDefinition*>", (void*)&sobj->_track_category_map, "_track_category_map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ready", &sobj->_ready);
      R__insp.GenericShowMembers("HLClonesArray", ( ::HLClonesArray * )( (::CategoryManager*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CategoryManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CategoryManager : new ::CategoryManager;
   }
   static void *newArray_CategoryManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CategoryManager[nElements] : new ::CategoryManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_CategoryManager(void *p) {
      delete ((::CategoryManager*)p);
   }
   static void deleteArray_CategoryManager(void *p) {
      delete [] ((::CategoryManager*)p);
   }
   static void destruct_CategoryManager(void *p) {
      typedef ::CategoryManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CategoryManager

namespace ROOT {
   void maplEstringcOTrackCategoryDefinitionmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOTrackCategoryDefinitionmUgR_Dictionary();
   static void *new_maplEstringcOTrackCategoryDefinitionmUgR(void *p = 0);
   static void *newArray_maplEstringcOTrackCategoryDefinitionmUgR(Long_t size, void *p);
   static void delete_maplEstringcOTrackCategoryDefinitionmUgR(void *p);
   static void deleteArray_maplEstringcOTrackCategoryDefinitionmUgR(void *p);
   static void destruct_maplEstringcOTrackCategoryDefinitionmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,TrackCategoryDefinition*>*)
   {
      map<string,TrackCategoryDefinition*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,TrackCategoryDefinition*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,TrackCategoryDefinition*>", -2, "/home/evrazhka/ND280/nd280rep/v11r31/ROOT/v5r34p09n04/amd64_linux26/lib/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,TrackCategoryDefinition*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOTrackCategoryDefinitionmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,TrackCategoryDefinition*>) );
      instance.SetNew(&new_maplEstringcOTrackCategoryDefinitionmUgR);
      instance.SetNewArray(&newArray_maplEstringcOTrackCategoryDefinitionmUgR);
      instance.SetDelete(&delete_maplEstringcOTrackCategoryDefinitionmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOTrackCategoryDefinitionmUgR);
      instance.SetDestructor(&destruct_maplEstringcOTrackCategoryDefinitionmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,TrackCategoryDefinition*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,TrackCategoryDefinition*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOTrackCategoryDefinitionmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,TrackCategoryDefinition*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOTrackCategoryDefinitionmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TrackCategoryDefinition*> : new map<string,TrackCategoryDefinition*>;
   }
   static void *newArray_maplEstringcOTrackCategoryDefinitionmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TrackCategoryDefinition*>[nElements] : new map<string,TrackCategoryDefinition*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOTrackCategoryDefinitionmUgR(void *p) {
      delete ((map<string,TrackCategoryDefinition*>*)p);
   }
   static void deleteArray_maplEstringcOTrackCategoryDefinitionmUgR(void *p) {
      delete [] ((map<string,TrackCategoryDefinition*>*)p);
   }
   static void destruct_maplEstringcOTrackCategoryDefinitionmUgR(void *p) {
      typedef map<string,TrackCategoryDefinition*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,TrackCategoryDefinition*>

/********************************************************
* ../dict/CategoryManager_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCategoryManager_Dict();

extern "C" void G__set_cpp_environmentCategoryManager_Dict() {
  G__cpp_reset_tagtableCategoryManager_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevCategoryManager_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* CategoryManager */
static int G__CategoryManager_Dict_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CategoryManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CategoryManager[n];
     } else {
       p = new((void*) gvp) CategoryManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CategoryManager;
     } else {
       p = new((void*) gvp) CategoryManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CategoryManager*) G__getstructoffset())->ResetCurrentCategories();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      ((CategoryManager*) G__getstructoffset())->AddCategory(
*(string*) libp->para[0].ref, (int) G__int(libp->para[1])
, (string*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (bool) G__int(libp->para[6]), (bool) G__int(libp->para[7])
, (bool) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((CategoryManager*) G__getstructoffset())->AddCategory(
*(string*) libp->para[0].ref, (int) G__int(libp->para[1])
, (string*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (bool) G__int(libp->para[6]), (bool) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((CategoryManager*) G__getstructoffset())->AddCategory(
*(string*) libp->para[0].ref, (int) G__int(libp->para[1])
, (string*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (bool) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((CategoryManager*) G__getstructoffset())->AddCategory(*(string*) libp->para[0].ref, (int) G__int(libp->para[1])
, (string*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((CategoryManager*) G__getstructoffset())->AddCategory(*(string*) libp->para[0].ref, (int) G__int(libp->para[1])
, (string*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CategoryManager*) G__getstructoffset())->CopyCategory(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((CategoryManager*) G__getstructoffset())->HasCategory(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CategoryManager*) G__getstructoffset())->ReadCategories(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<std::string,TrackCategoryDefinition*>& obj = ((CategoryManager*) G__getstructoffset())->GetCategories();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CategoryManager*) G__getstructoffset())->DumpCategories();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CategoryManager*) G__getstructoffset())->DumpCategory(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TrackCategoryDefinition& obj = ((CategoryManager*) G__getstructoffset())->GetCategory(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TrackTypeDefinition>& obj = ((CategoryManager*) G__getstructoffset())->GetCategoryTypes(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((CategoryManager*) G__getstructoffset())->SetCode(*(string*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((CategoryManager*) G__getstructoffset())->SetCode(*(string*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CategoryManager*) G__getstructoffset())->SetCategoryType(*(string*) libp->para[0].ref, (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CategoryManager*) G__getstructoffset())->GetCode(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((CategoryManager*) G__getstructoffset())->CheckCategoryType(*(string*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CategoryManager*) G__getstructoffset())->IsReady());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CategoryManager_Dict_502_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CategoryManager*) G__getstructoffset())->SetReady((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CategoryManager_Dict_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CategoryManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CategoryManager(*(CategoryManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CategoryManager G__TCategoryManager;
static int G__CategoryManager_Dict_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CategoryManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CategoryManager*) (soff+(sizeof(CategoryManager)*i)))->~G__TCategoryManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CategoryManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CategoryManager*) (soff))->~G__TCategoryManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CategoryManager_Dict_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CategoryManager* dest = (CategoryManager*) G__getstructoffset();
   *dest = *(CategoryManager*) libp->para[0].ref;
   const CategoryManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* CategoryManager */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCategoryManager_Dict {
 public:
  G__Sizep2memfuncCategoryManager_Dict(): p(&G__Sizep2memfuncCategoryManager_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCategoryManager_Dict::*p)();
};

size_t G__get_sizep2memfuncCategoryManager_Dict()
{
  G__Sizep2memfuncCategoryManager_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCategoryManager_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager))) {
     CategoryManager *G__Lderived;
     G__Lderived=(CategoryManager*)0x1000;
     {
       HLClonesArray *G__Lpbase=(HLClonesArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager),G__get_linked_tagnum(&G__CategoryManager_DictLN_HLClonesArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCategoryManager_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TrackTypeDefinition>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TrackCategoryDefinition*>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TrackCategoryDefinition*>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TrackCategoryDefinition*>",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TrackCategoryDefinition*,less<string> >",117,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* CategoryManager */
static void G__setup_memvarCategoryManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager));
   { CategoryManager *p; p=(CategoryManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR),G__defined_typename("map<std::string,TrackCategoryDefinition*>"),-1,2,"_track_category_map=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_ready=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCategoryManager_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCategoryManager(void) {
   /* CategoryManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager));
   G__memfunc_setup("CategoryManager",1529,G__CategoryManager_Dict_502_0_1, 105, G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCurrentCategories",2284,G__CategoryManager_Dict_502_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCategory",1095,G__CategoryManager_Dict_502_0_3, 121, -1, -1, 0, 9, 1, 1, 0, 
"u 'string' - 11 - name i - - 0 - ntypes "
"U 'string' - 0 - names I - - 0 - codes "
"I - - 0 - colors g - - 0 'false' multi "
"g - - 0 'false' noWarning g - - 0 'true' addNOTRUTH "
"g - - 0 'true' addSAND", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyCategory",1241,G__CategoryManager_Dict_502_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - categ_name u 'string' - 11 - categ_name2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasCategory",1114,G__CategoryManager_Dict_502_0_5, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - categ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadCategories",1410,G__CategoryManager_Dict_502_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCategories",1318,G__CategoryManager_Dict_502_0_7, 117, G__get_linked_tagnum(&G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR), G__defined_typename("map<std::string,TrackCategoryDefinition*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpCategories",1436,G__CategoryManager_Dict_502_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpCategory",1236,G__CategoryManager_Dict_502_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - categ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCategory",1118,G__CategoryManager_Dict_502_0_10, 117, G__get_linked_tagnum(&G__CategoryManager_DictLN_TrackCategoryDefinition), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - categ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCategoryTypes",1651,G__CategoryManager_Dict_502_0_11, 117, G__get_linked_tagnum(&G__CategoryManager_DictLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR), G__defined_typename("vector<TrackTypeDefinition>"), 1, 1, 1, 1, 0, "u 'string' - 11 - categ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCode",679,G__CategoryManager_Dict_502_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - categ i - - 0 - code "
"i - - 0 '0' defaultcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCategoryType",1548,G__CategoryManager_Dict_502_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - categ i - - 0 - type "
"g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCode",667,G__CategoryManager_Dict_502_0_14, 105, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - categ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckCategoryType",1726,G__CategoryManager_Dict_502_0_15, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - categ i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsReady",689,G__CategoryManager_Dict_502_0_16, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReady",801,G__CategoryManager_Dict_502_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - ok", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CategoryManager", 1529, G__CategoryManager_Dict_502_0_18, (int) ('i'), G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager), -1, 0, 1, 1, 1, 0, "u 'CategoryManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CategoryManager", 1655, G__CategoryManager_Dict_502_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CategoryManager_Dict_502_0_20, (int) ('u'), G__get_linked_tagnum(&G__CategoryManager_DictLN_CategoryManager), -1, 1, 1, 1, 1, 0, "u 'CategoryManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCategoryManager_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCategoryManager_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCategoryManager_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CategoryManager_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_HLClonesArray = { "HLClonesArray" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_TrackCategoryDefinition = { "TrackCategoryDefinition" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR = { "vector<TrackTypeDefinition,allocator<TrackTypeDefinition> >" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TrackTypeDefinition,allocator<TrackTypeDefinition> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_CategoryManager = { "CategoryManager" , 99 , -1 };
G__linked_taginfo G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR = { "map<string,TrackCategoryDefinition*,less<string>,allocator<pair<const string,TrackCategoryDefinition*> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCategoryManager_Dict() {
  G__CategoryManager_DictLN_string.tagnum = -1 ;
  G__CategoryManager_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CategoryManager_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CategoryManager_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CategoryManager_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CategoryManager_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__CategoryManager_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__CategoryManager_DictLN_HLClonesArray.tagnum = -1 ;
  G__CategoryManager_DictLN_TrackCategoryDefinition.tagnum = -1 ;
  G__CategoryManager_DictLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR.tagnum = -1 ;
  G__CategoryManager_DictLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CategoryManager_DictLN_CategoryManager.tagnum = -1 ;
  G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCategoryManager_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_string);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_HLClonesArray);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_TrackCategoryDefinition);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_vectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgR);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_reverse_iteratorlEvectorlETrackTypeDefinitioncOallocatorlETrackTypeDefinitiongRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_CategoryManager),sizeof(CategoryManager),-1,296192,(char*)NULL,G__setup_memvarCategoryManager,G__setup_memfuncCategoryManager);
   G__get_linked_tagnum_fwd(&G__CategoryManager_DictLN_maplEstringcOTrackCategoryDefinitionmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTrackCategoryDefinitionmUgRsPgRsPgR);
}
extern "C" void G__cpp_setupCategoryManager_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupCategoryManager_Dict()");
  G__set_cpp_environmentCategoryManager_Dict();
  G__cpp_setup_tagtableCategoryManager_Dict();

  G__cpp_setup_inheritanceCategoryManager_Dict();

  G__cpp_setup_typetableCategoryManager_Dict();

  G__cpp_setup_memvarCategoryManager_Dict();

  G__cpp_setup_memfuncCategoryManager_Dict();
  G__cpp_setup_globalCategoryManager_Dict();
  G__cpp_setup_funcCategoryManager_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCategoryManager_Dict();
  return;
}
class G__cpp_setup_initCategoryManager_Dict {
  public:
    G__cpp_setup_initCategoryManager_Dict() { G__add_setup_func("CategoryManager_Dict",(G__incsetup)(&G__cpp_setupCategoryManager_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCategoryManager_Dict() { G__remove_setup_func("CategoryManager_Dict"); }
};
G__cpp_setup_initCategoryManager_Dict G__cpp_setup_initializerCategoryManager_Dict;

