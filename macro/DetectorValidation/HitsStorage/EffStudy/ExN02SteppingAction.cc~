//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: ExN02SteppingAction.cc,v 1.9 2006-06-29 17:48:18 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
// 
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

//#include "G4SteppingManager.hh"

#include "ExN02SteppingAction.hh"
#include "ExN02EventAction.hh"
#include "ExN02DetectorConstruction.hh"

#include "G4Step.hh"
#include "G4RunManager.hh"



//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

ExN02SteppingAction::ExN02SteppingAction(
 					 const ExN02DetectorConstruction* detectorConstruction,
					 ExN02EventAction* eventAction)
  : G4UserSteppingAction(),
    fDetConstruction(detectorConstruction),
    fEventAction(eventAction)
{
}


//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

ExN02SteppingAction::~ExN02SteppingAction()
{
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void ExN02SteppingAction::UserSteppingAction(const G4Step* step)
{
  // Collect energy and track length step by step

  // energy deposit
  // only when there is energy deposit in a sensitive detector,
  // create a new hit.
  G4double edep = step->GetTotalEnergyDeposit();
  if(edep==0.) return;
  G4StepPoint* prestep  = step->GetPreStepPoint();
  //G4StepPoint* poststep = step->GetPostStepPoint();
  G4Track *track = step->GetTrack(); // it's PostStepPoint!!!
  
  // get volume of the current step
  //G4VPhysicalVolume* volume = prestep->GetTouchableHandle()->GetVolume();

  // step length                                                    
  G4double length = 0.;
  if ( step->GetTrack()->GetDefinition()->GetPDGCharge() != 0. ) {
    length = step->GetStepLength();
  }

  //Find the detector name and ? what is addapsdetetctor?
  G4String namedet = prestep->GetTouchableHandle()->GetVolume()->GetName();        
  fEventAction->AddAbsTot(edep,length);    
  if(namedet=="/World/Basket/Tracker/TPCUp1")
    fEventAction->AddAbsTPCup1(edep,length);
  else if(namedet=="/World/Basket/Tracker/TPCUp2")
    fEventAction->AddAbsTPCup2(edep,length);
  else if(namedet=="/World/Basket/Tracker/TPCDown1")
    fEventAction->AddAbsTPCdown1(edep,length);
  else if(namedet=="/World/Basket/Tracker/TPCDown2")
    fEventAction->AddAbsTPCdown2(edep,length);
  else if(namedet=="/World/Basket/Tracker/Target1") 
    fEventAction->AddAbsTarget1(edep,length);
  else if(namedet=="/World/Basket/Tracker/Target2") 
    fEventAction->AddAbsTarget2(edep,length);
  else if(namedet=="/World/Basket/Tracker/FGD1") 
    fEventAction->AddAbsFGD1(edep,length);
  else if(namedet=="/World/Basket/Tracker/FGD2") 
    fEventAction->AddAbsFGD2(edep,length);
  else if( namedet=="/World/Basket/Tracker/ForwTPC1/Half" || 
	   namedet=="/World/Basket/Tracker/ForwTPC1/MM" ) 
    fEventAction->AddAbsForwTPC1(edep,length);
  else if( namedet=="/World/Basket/Tracker/ForwTPC2/Half" || 
	   namedet=="/World/Basket/Tracker/ForwTPC2/MM" ) 
    fEventAction->AddAbsForwTPC2(edep,length);
  else if( namedet=="/World/Basket/Tracker/ForwTPC3/Half" || 
	   namedet=="/World/Basket/Tracker/ForwTPC3/MM" ) 
    fEventAction->AddAbsForwTPC3(edep,length);
  
  //if(namedet=="ForwTPC1/Half")
  //G4cout << "length = " << length << G4endl;

  // Get track info    
  fEventAction->SetTrack(step);


  //
 
  TotalhlayerDep += edep;

  // volume information must be extracted from Touchable of "PreStepPoint"
  const G4VTouchable* Touchable = aStep->GetPreStepPoint()->GetTouchable();
  G4int detID = Touchable->GetVolume(0)->GetCopyNo();
	G4int trackID = track->GetTrackID();
  G4int PDG = track->GetDefinition()->GetPDGEncoding();
  G4ThreeVector hitPos = aStep->GetPreStepPoint()->GetPosition();
  G4double hittime = aStep->GetPreStepPoint()->GetGlobalTime();

	//apply quenching effect
	G4double edep_q = edep;
	ingresp->ApplyScintiResponse(&edep_q,track);
    
	//
	IngridHLayerHit* aHit 
		= new IngridHLayerHit(detID,PDG,trackID,edep,edep_q,hitPos,hittime);
    
	IngridHLayerHit* bHit;

	for(int k=0;k<hlayerHitCollection->entries();k++){
		bHit = (*hlayerHitCollection)[k];

		if(bHit->CompareID(*aHit)){
			bHit->AddEdep(edep,edep_q);

			if(bHit->isFaster(*aHit)) { 
			  bHit->SetTime(aHit->GetTime()); 
			}
			if(bHit->LargerEdep(*aHit)) { 
			  bHit->SetParticle(aHit->GetParticle()); 
			}
			return true;
		}
	}

	hlayerHitCollection->insert( aHit );

	return true;

}

void IngridHLayerSD::EndOfEvent(G4HCofThisEvent* HCTE)
{
#if DEBUG
  G4cout << "hlayer hits : " << fHIT << "\n"; // number of Hits
#endif
  IngridHLayerHit *cHit;

  G4double edep_tmp;
  G4double time_tmp;
  G4ThreeVector posinmod;
  G4int mod;
  G4int view;
  G4int adc;
  G4int loadc;
  G4double pe;
  G4double lope;
  G4int pln;//added for B2 2014/1/27

	//
  // apply ingrid response
  for(G4int k=0;k<hlayerHitCollection->entries();k++) {
		cHit = (*hlayerHitCollection)[k];

		//
    edep_tmp = cHit->GetEdepQ();
    time_tmp = cHit->GetTime();
    posinmod = cHit->GetPosInMod();
    mod = cHit->GetMod();
    view = cHit->GetView();
    pln = cHit->GetPln();

    //apply light collection
    //ingresp->ApplyLightCollection(&edep_tmp,mod,view,posinmod);
    ingresp->ApplyLightCollection(&edep_tmp,mod,view,posinmod,pln);//B2

    //apply fiber attenuation
    //ingresp->ApplyFiberResponse(&edep_tmp,&time_tmp,view,posinmod);
    ingresp->ApplyFiberResponse(&edep_tmp,mod,&time_tmp,view,posinmod,pln);//B2

    //convert edep -> p.e. &  p.e. statistic & cross-talk & after-pulse
    ingresp->ApplyMPPCResponse(edep_tmp,&pe);

    //apply ADC responce
    ingresp->ApplyADCResponse(&pe,&lope,&adc,&loadc);

    //fill variable to hitcollection
    cHit->SetPE(pe);
    cHit->SetLOPE(lope);
    cHit->SetDelayTime(time_tmp);
  }

  // // Take track informations from its first step
  // G4int newtrkid      = track->GetTrackID();
  // G4int newparentid   = track->GetParentID();
  // G4int newtrkpdg     = track->GetDefinition()->GetPDGEncoding();
  
  // // Get the total initial energy of the track
  // G4double newtrkmass        = track->GetDefinition()->GetPDGMass();
  // G4double newtrkEkinVtx     = track->GetVertexKineticEnergy();  
  // G4double newtrkEtotVtx     = newtrkEkinVtx + newtrkmass;             
  
  // // Get the total initial momentum
  // //G4ThreeVector newVecMomVtx = track->GetMomentum(); // it's PostStep not PreStep!!!  
  // G4double newtrkMomX   = prestep->GetMomentum().x();
  // G4double newtrkMomY   = prestep->GetMomentum().y();
  // G4double newtrkMomZ   = prestep->GetMomentum().z();
  // G4double newtrkMomMag = prestep->GetMomentum().mag();
  
  // std::cout << "Track ID: = " << newtrkid 
  //  	    << " - Parent ID: = " << newparentid
  //  	    << " - Track PDG: = " << newtrkpdg   
  //  	    << " - Track E: = " << newtrkEtotVtx  
  //  	    << " - Track Mom: = " << newtrkMomMag   
  //   //<< " - PreStep Mom: = " << prestep->GetMomentum().mag()
  //   //<< " - PostStep Mom: = " << poststep->GetMomentum().mag()
  //  	    << std::endl;  
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......      
