#include <globals.hh>
#include <G4Material.hh>
#include <G4LogicalVolume.hh>
#include <G4VisAttributes.hh>
#include <G4PVPlacement.hh>

#include <G4RotationMatrix.hh>

#include <G4Box.hh>
#include <G4Tubs.hh>
#include <G4Trap.hh>
#include <G4SubtractionSolid.hh>

#include "G4SDManager.hh"
#include "ExN02TrackerSD.hh"

#include "ND280BarScintConstructor.hh"

// used to keep a list of SD logical volumes
#include "G4RegionStore.hh"
#include <G4Region.hh> 
//

class ND280BarScintMessenger: public ND280ConstructorMessenger {

private:
    
  ND280BarScintConstructor *fConstructor;
  
  G4UIcmdWithAString*        fShapeCMD;
  G4UIcmdWithADoubleAndUnit* fLengthCMD;
  G4UIcmdWithADoubleAndUnit* fHeightCMD;
  G4UIcmdWithADoubleAndUnit* fCoatingThicknessCMD;
  G4UIcmdWithADoubleAndUnit* fGapCMD;
  G4UIcmdWithABool*          fVisibleCMD;

public:

  ND280BarScintMessenger(ND280BarScintConstructor* c) 
    : ND280ConstructorMessenger(c,"Control the T2K world geometry."),
      fConstructor(c) {
    
    //fShapeCMD = new G4UIcmdWithAString(CommandName("shape"),this);
    //fShapeCMD->SetGuidance("Set the extruded cross section of the bar.");
    //fShapeCMD->SetParameterName("Shape",false);
    //fShapeCMD->SetCandidates("triangle rectangle");
    
    fLengthCMD = new G4UIcmdWithADoubleAndUnit(CommandName("length"),this);
    fLengthCMD->SetGuidance("Set the length of a bar.");
    fLengthCMD->SetParameterName("Length",false);
    fLengthCMD->SetUnitCategory("Length");
    
    fHeightCMD = new G4UIcmdWithADoubleAndUnit(CommandName("height"),this);
    fHeightCMD->SetGuidance("Set the bar height (default from base).");
    fHeightCMD->SetParameterName("Height",false);
    fHeightCMD->SetUnitCategory("Length");
    
    fCoatingThicknessCMD =
      new G4UIcmdWithADoubleAndUnit(CommandName("coating"),this);
    fCoatingThicknessCMD->
      SetGuidance("Set thickness of the coating on the bars.");
    fCoatingThicknessCMD->SetParameterName("TCoating",false);
    fCoatingThicknessCMD->SetUnitCategory("Length");
    
    fGapCMD = new G4UIcmdWithADoubleAndUnit(CommandName("gap"),this);
    fGapCMD->SetGuidance("Set the gap between the bars.");
    fGapCMD->SetParameterName("Gap",false);
    fGapCMD->SetUnitCategory("Length");
    
    fVisibleCMD = new G4UIcmdWithABool(CommandName("visible"),this);
    fVisibleCMD->SetGuidance("Should the bar be drawn in pictures.");
    fVisibleCMD->SetParameterName("Visible",false);
    
  }
  
  
  ~ND280BarScintMessenger() {
    //delete fShapeCMD;
    delete fLengthCMD;
    delete fHeightCMD;
    delete fCoatingThicknessCMD;
    delete fGapCMD;
    delete fVisibleCMD;
  }
  
  void SetNewValue(G4UIcommand *cmd, G4String val) {
    
    if (cmd == fLengthCMD) {
      fConstructor->SetLength(fLengthCMD->GetNewDoubleValue(val));
    }
    else if (cmd == fHeightCMD) {
      fConstructor->SetHeight(fHeightCMD->GetNewDoubleValue(val));
    }
    else if (cmd == fCoatingThicknessCMD) {
      fConstructor->SetCoatingThickness(fCoatingThicknessCMD
					->GetNewDoubleValue(val));
    }
    else if (cmd == fGapCMD) {
      fConstructor->SetGap(fGapCMD->GetNewDoubleValue(val));
    }
    //else if (cmd == fShapeCMD) {
    //if (val == "triangle") {
    //	fConstructor->SetShape(
    //			       ND280BarScintConstructor::eTriangle);
    //}
    //else if (val == "rectangle") {
    //fConstructor->SetShape(
    //			     ND280BarScintConstructor::eRectangle);
    //}
    //}
    else {
      ND280ConstructorMessenger::SetNewValue(cmd,val);
    }
  }
};
  
  ND280BarScintConstructor::~ND280BarScintConstructor() {;};

void ND280BarScintConstructor::Init() {
  
  SetBase(10*mm);
  SetWidth(10*mm);
  SetHeight(10*mm);
  SetLength(10*mm);
  SetCoatingThickness(0.25*mm);
  SetGap(0.0*mm);
  
  //SetSensitiveDetector(NULL);
  SetVisibility(false);

  SetCoatingMaterial("ScintillatorCoating");
  SetScintillatorMaterial("FGDScintillator");  
  SetFiberMaterial("FiberCore");

  SetMessenger(new ND280BarScintMessenger(this));
}

G4LogicalVolume* ND280BarScintConstructor::GetPiece(void) {

  // Get the SD defined in ExN02DetectorConstrucion  
  G4SDManager* SDman = G4SDManager::GetSDMpointer();
  ExN02TrackerSD *aTrackerSD = (ExN02TrackerSD*)SDman->FindSensitiveDetector("ExN02/Tracker"); 
  //
  
  ND280RootPersistencyManager* InputPersistencyManager
    = ND280RootPersistencyManager::GetInstance();
  fND280XMLInput = InputPersistencyManager->GetXMLInput();

  G4VSolid* bar = NULL;
  G4VSolid* extrusion = NULL;
  G4VSolid* scintillator = NULL;
  G4VSolid* scintside = NULL;
  G4VSolid* scintcrnr = NULL;
  G4VSolid* fiberHole = NULL;
  G4VSolid* scintWithHole = NULL;
  G4VSolid* extrusionWithHole = NULL;

  // The offset of the core volume from the bar volume.
  double coreOffset = 0.0;
  
  G4VisAttributes *visAtt_Scint = new G4VisAttributes();
  visAtt_Scint->SetColor(0.5,0.5,0.5,0.); // gray
  visAtt_Scint->SetForceSolid(true);
  G4VisAttributes *visAtt_Coat = new G4VisAttributes();
  visAtt_Coat->SetColor(1.0,1.0,1.0); // white
  //visAtt_Coat->SetColor(0.5,0.5,0.5,0.); // gray
  visAtt_Coat->SetForceSolid(true);

  double width=0;
  double height=0;
  double length=0;
 
  double cladThickFrac = 0.02 * 2.; // 2% on both sides
  double scintWidth=0;
  double scintHeight=0;
  double scintLength=0;
 
  if(GetBarDir()==conv::kAlongX){
    scintWidth  = GetAxisLength();
    scintHeight = GetBase();
    scintLength = GetBase();
  }
  else if(GetBarDir()==conv::kAlongY){
    scintWidth  = GetBase();
    scintHeight = GetAxisLength();
    scintLength = GetBase();
  }
  else if(GetBarDir()==conv::kAlongZ){
    scintWidth  = GetBase();
    scintHeight = GetBase();
    scintLength = GetAxisLength();
  }

  // Set the dimension in the XYZ frame
  SetWidth(width);
  SetHeight(height);
  SetLength(length);


  // Build G4VSolid the plastic cube with coating and holes for WLS fibers

  extrusion = new G4Box(GetName()+"/Extrusion",
			GetWidth()/2,
			GetHeight()/2,
			GetLength()/2
			);
  
  scintillator = new G4Box(GetName()+"/Extrusion/Core",
   			   GetWidth()/2-GetCoatingThickness(),
  			   GetHeight()/2-GetCoatingThickness(),
  			   GetLength()/2-GetCoatingThickness()
			   );

  
  fiberHole = new G4Tubs(GetName()+"/Extrusion/Core/Hole",
			 0.0*cm,
			 GetHoleRadius(),
			 GetLength()/2*2.,
			 0.*deg,
			 360.*deg);
  

  // Define shifts of the 3 holes wrt each other (WLS fibers must not overlap)
  G4ThreeVector Pos_X = G4ThreeVector(0,0,0); // hole along X
  G4ThreeVector Pos_Y = G4ThreeVector(0,0,0); // hole along Y
  G4ThreeVector Pos_Z = G4ThreeVector(0,0,0); // hole along Z
  
  extrusionWithHole = extrusion;
  scintWithHole = scintillator;

  // subtract hole along Z
  scintWithHole = new G4SubtractionSolid(GetName()+"/Extrusion/Core",
					 scintWithHole,
					 fiberHole,
					 0,
					 Pos_Z
					 );

    
  // subtract hole along X

  G4RotationMatrix* rotationAlongX = new G4RotationMatrix();
  rotationAlongX->rotateX(0 *degree); 
  rotationAlongX->rotateY(90*degree); 
  rotationAlongX->rotateZ(0 *degree);      

  scintWithHole = new G4SubtractionSolid(GetName()+"/Extrusion/Core",
					 scintWithHole,
					 fiberHole,
					 rotationAlongX,
					 Pos_X
					 );


  // subtract hole along Y

  G4RotationMatrix* rotationAlongY = new G4RotationMatrix();
  rotationAlongY->rotateX(90 *degree); 
  rotationAlongY->rotateY(0 *degree); 
  rotationAlongY->rotateZ(0 *degree);      
  
  scintWithHole = new G4SubtractionSolid(GetName()+"/Extrusion/Core",
					 scintWithHole,
					 fiberHole,
					 rotationAlongY,
					 Pos_Y
					 );  

  // logical volumes

  coreOffset = 0.0;
  
  G4LogicalVolume* extrusionVolume
    = new G4LogicalVolume(extrusionWithHole,
			  FindMaterial(GetCoatingMaterial()),
			  GetName()+"/Extrusion");

  G4LogicalVolume *scintVolume;
  scintVolume = new G4LogicalVolume(scintWithHole,
				    FindMaterial(GetScintillatorMaterial()),
				    GetName()+"/Extrusion/Core");

  // Define the volume of plastic scintillator as sensitive detector
  scintVolume->SetSensitiveDetector( aTrackerSD ); 

  
  // Place the scintillator inside the extrusion volume
  new G4PVPlacement(0,                   // no rotation
		    G4ThreeVector(0,coreOffset,0),     // position
		    scintVolume,         // its logical volume
		    GetName()+"/Extrusion/Core",   // its name
		    extrusionVolume,     // its mother  volume
		    false,               // no boolean operations
		    0);                  // copy number

  if( GetND280XML()->GetXMLInvisSuperFGD() ){
    extrusionVolume->SetVisAttributes(G4VisAttributes::Invisible);
    scintVolume    ->SetVisAttributes(G4VisAttributes::Invisible);
  }
  else{
    extrusionVolume->SetVisAttributes(visAtt_Coat); 
    scintVolume    ->SetVisAttributes(visAtt_Scint);
  }

  //
  // Build the WLS fiber
  // 
  // In order to avoid placement of independent WLS fibers outside of the G4VReplica cubes
  // add many WLS fiber along the cube (same size as the single cube).
  // When the G4VReplica is used in ND280SuperFGDConstructor.cc the cubes will be all attached
  // between each other and the same will happen among the WLS fiber segments.
  //

  G4VisAttributes *visAtt_Fiber = new G4VisAttributes();
  visAtt_Fiber->SetColor(0.0,1.0,0.0); // green
  visAtt_Fiber->SetForceSolid(true);
  
  if (GetFiberRadius()>GetHoleRadius()) { 
    G4Exception("ND280CubeScintConstructor::GetPiece",
  		"MyCode0002",FatalException,
  		"Fiber radius > Hole radius !");
  }
  else{
    
    G4VSolid* fiberAlongX = new G4Tubs(GetName()+"/Extrusion/FiberX",
				       0.0*cm,
				       GetFiberRadius(),
				       GetBase()/2,
				       0.*deg,
				       360.*deg);

    G4VSolid* fiberAlongY = new G4Tubs(GetName()+"/Extrusion/FiberY",
				       0.0*cm,
				       GetFiberRadius(),
				       GetHeight()/2,
				       0.*deg,
				       360.*deg);
    
    G4VSolid* fiberAlongZ = new G4Tubs(GetName()+"/Extrusion/FiberZ",
				       0.0*cm,
				       GetFiberRadius(),
				       GetLength()/2,
				       0.*deg,
				       360.*deg);
    
    G4LogicalVolume *fiberAlongXVolume
      = new G4LogicalVolume(fiberAlongX,
			    FindMaterial(GetFiberMaterial()),
			    GetName()+"/Extrusion/FiberX");
    
    G4LogicalVolume *fiberAlongYVolume
      = new G4LogicalVolume(fiberAlongY,
			    FindMaterial(GetFiberMaterial()),
			    GetName()+"/Extrusion/FiberY");
    
    G4LogicalVolume *fiberAlongZVolume
      = new G4LogicalVolume(fiberAlongZ,
			    FindMaterial(GetFiberMaterial()),
			    GetName()+"/Extrusion/FiberZ");
    
    if( GetND280XML()->GetXMLInvisSuperFGD() ){
      fiberAlongXVolume->SetVisAttributes(G4VisAttributes::Invisible);
      fiberAlongYVolume->SetVisAttributes(G4VisAttributes::Invisible);
      fiberAlongZVolume->SetVisAttributes(G4VisAttributes::Invisible);
    }
    else{
      fiberAlongXVolume->SetVisAttributes(visAtt_Fiber);
      fiberAlongYVolume->SetVisAttributes(visAtt_Fiber);
      fiberAlongZVolume->SetVisAttributes(visAtt_Fiber);
    }

    /*
    // Place the WLS fibers inside the logVolume
    
    new G4PVPlacement(rotationAlongX,                  // no rotation         
		      GetHolePosition_X(),
		      fiberAlongXVolume,         // its logical volume
		      GetName()+"/Extrusion/FiberX",  // its name
		      extrusionVolume,     // its mother  volume
		      false,               // no boolean operations
		      0);           // copy number
    
    new G4PVPlacement(rotationAlongY,                  // no rotation         
		      GetHolePosition_Y(),
		      fiberAlongYVolume,         // its logical volume
		      GetName()+"/Extrusion/FiberY",  // its name
		      extrusionVolume,     // its mother  volume
		      false,               // no boolean operations
		      0);           // copy number

    new G4PVPlacement(0,                  // no rotation         
		      GetHolePosition_Z(),
		      fiberAlongZVolume,         // its logical volume
		      GetName()+"/Extrusion/FiberZ",  // its name
		      extrusionVolume,     // its mother  volume
		      false,               // no boolean operations
		      0);           // copy number
 
    */
  }

  return extrusionVolume;













  /*
  cladding = new G4Box(GetName()+"/Cladding",
		       width/2,
		       height/2,
		       length/2
		       );
    
  scintillator = new G4Box(GetName()+"/Cladding/Core",
   			   scintWidth/2,
			   scintHeight/2,
			   scintLength/2
			   );

  // logical volumes

  coreOffset = 0.0;
  
  G4LogicalVolume* claddingVolume
    = new G4LogicalVolume(cladding,
			  FindMaterial(GetBarCladMaterial()),
			  GetName()+"/Cladding");

  G4LogicalVolume *scintVolume;
  scintVolume = new G4LogicalVolume(scintillator,
				    FindMaterial(GetBarCoreMaterial()),
				    GetName()+"/Cladding/Core");

  // Define the volume of plastic scintillator as sensitive detector
  scintVolume->SetSensitiveDetector( aTrackerSD ); 

  if( GetND280XML()->GetXMLInvisSciFi() ){
    claddingVolume->SetVisAttributes(G4VisAttributes::Invisible);
    scintVolume    ->SetVisAttributes(G4VisAttributes::Invisible);
  }
  else{
    claddingVolume->SetVisAttributes(visAtt_Coat); 
    scintVolume    ->SetVisAttributes(visAtt_Scint);
  }
  
  // Place the scintillator inside the cladding volume
  new G4PVPlacement(0,                   // no rotation
		    G4ThreeVector(0,coreOffset,0),     // position
		    scintVolume,         // its logical volume
		    GetName()+"/Cladding/Core",   // its name
		    claddingVolume,     // its mother  volume
		    false,               // no boolean operations
		    0);                  // copy number
 
  return claddingVolume;
  */
}



//void ND280BarScintConstructor::SetSensitiveDetector(
//  G4VSensitiveDetector* s) {
//  fSensitiveDetector = s;
//}
